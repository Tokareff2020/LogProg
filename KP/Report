# Отчет по курсовому проекту
## по курсу "Логическое программирование"

### студент: Токарев М.С.

## Результат проверки

Вариант задания:

 - [x] стандартный, без NLP (на 3)
 - [ ] стандартный, с NLP (на 3-4)
 - [ ] продвинутый (на 3-5)
 
| Преподаватель     | Дата         |  Оценка       |
|-------------------|--------------|---------------|
| Сошников Д.В. |    21.2.22          |         3      |
| Левинская М.А.|              |               |


## Введение
 
Этот курсовой проект помог мне взглянуть на логические языки по-другому, я понял парадигму логических языков, изучил их прикладные возможности и принципы.
 
## Задание
 
Реализовать древовидную структуру, используя следующие предикаты: parent(родитель, ребенок), sex(человек, м/ж)
Реализовать предикат проверки/поиска золовки.
 
## Получение родословного дерева

Родословное дерево в формате GEDCOM получено с помощью сайта myharitage.com. В нём 8 индивидуумов.
 
## Конвертация родословного дерева
 
Использовал обработчик, написанный на bash. Он принимает в качестве аргумента файл, из которого будут считываться все данные. Затем данные считываются по строкам,если найден человек подходящий под условия, то он добавляется в словарь.
 
## Предикат поиска родственника
 
Золовка - сестра мужа. Соответственно для поиска золовки удобно создать ещё несколько предикатов отношений : отношение жена и отношение сестра. Для реализации этих предикатов удобно создать ещё несколько предикатов: отношение отец и отношение мать.
Предикаты выглядят следующим образом:

    relation(father,X,Y):-parent(X,Y),sex(X,m).
    relation(mother,X,Y):-parent(X,Y),sex(X,f).
    relation(wife,X,Y):-sex(X,f),relation(mother,X,A),relation(father,Y,A).
    relation(sister,X,Y):-sex(X,f),relation(father,A,X),relation(father,A,Y),X \= Y.
   
После того,как доп.предикаты отношений были созданы, можно написать предикат проверки и поиска золовки:

    relation(zolowka,X,Y):-relation(wife,Y,A),relation(sister,X,A).
    
Предикат работает следующим образом: в том случае, если можно найти такого A, что X является сестрой A, и Y является женой A, то X является золовкой Y.
Пример работы:
```
?- relation(zolowka,X,Y).
X = "Tatyana_Dudkina",
Y = "Lubov_Tokareva" ;
 
?- relation(zolowka,"Tatyana_Dudkina","Lubov_Tokareva").
true ;
false.
 
?- relation(X,"Tatyana_Dudkina","Lubov_Tokareva").
X = zolowka ;
false.
```
## Определение степени родства
 
Для определения степени родства был написан предикат relative(X,Y,Z) - Между Y и Z отношения X.
Вначале проверяются тривиальные (описанные в правилах) случаи, то есть отношения следующего типа: мать,отец,брат,сестра,золовка. Если совпадений не находится, то используется глубокий поиск с использованием следующего предиката:
```
relative([H1|Deep], X, Y, N) :- N = 'deep',
    relative(Deep, X,num, 'deep'), X \= num,
    relative(H, num, Y, 'head'), Y \= num, X \= Y, [H1|[]]=H.
```
 
Этот предикат определяет родственника для Х и ищет каким приходится этот родственник для Y. Этот предикат выдаёт бесконечное количество ответов, из-за чего приходиться прерывать исполнение предиката break'ом.
Пример исполнения:
```
?- relative(X,"Токарев_Михаил","Токарева_Любовь").
X = ["mother"] ;
X = ["wife", "father"] ;
```

## Выводы
 
В целом по поводу курсовой работы хочется сказать, что проект оказался довольно-таки разносторонним. В процессе написания реферата я смог разобраться в различиях декларативной и императивной парадигм программирования, узнал в каких задачах Пролог показывает свои сильные стороны, а в каких слабые, и почему же логических языки хороши в качестве первых языков программирования для изучения. При написании конвертера из GEDCOM в предикаты Пролога я смог опробовать регулярные выражения в C++, что очень полезно лично мне, т.к. я планирую работать backed разработчиком, так что я обязан знать шаблонные выражения.

Мне выпала возможность лучше познакомиться с парадигмой лог
